@page "/"

@using Syncfusion.EJ2.Blazor.Grids
@using System.IO
@using System.Text
@using System.Net
@using BlazorApp4
<EjsGrid DataSource="@Orders" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowGrouping="true" Toolbar="@(new List<string>() {"Add","Edit","Delete","Cancel","Update" })">
    <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
    <GridPageSettings PageSize="5"></GridPageSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Order.OrderID) HeaderText="OrderID" TextAlign="TextAlign.Right" Width="120"></GridColumn>
        <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
        <GridColumn Field=@nameof(Order.OrderDate) HeaderText=" Order Date" Format="yMd" Type="ColumnType.Date" TextAlign="TextAlign.Right" Width="130"></GridColumn>
        <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2" TextAlign="TextAlign.Right" Width="120"></GridColumn>
    </GridColumns>
</EjsGrid>

@code{

    public List<Order> Orders { get; set; }
    System.Net.WebClient client = new System.Net.WebClient();
    MyWebClient webClient;
    class MyWebClient : WebClient

    {

        protected override WebRequest GetWebRequest(Uri address)

        {

            HttpWebRequest request = base.GetWebRequest(address) as HttpWebRequest;

            request.AutomaticDecompression = DecompressionMethods.Deflate | DecompressionMethods.GZip;

            return request;

        }

    }
    protected override void OnInitialized()
    {
        Orders = Enumerable.Range(1, 75).Select(x => new Order()
        {
            OrderID = 1000 + x,
            CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
            Freight = 2.1 * x,
            OrderDate = DateTime.Now.AddDays(-x),
        }).ToList();
    }

    public class Order
    {
        public int? OrderID { get; set; }
        public string CustomerID { get; set; }
        public DateTime? OrderDate { get; set; }
        public double? Freight { get; set; }
    }

    [Inject]
    protected IJSRuntime JsRuntime { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        string url = "http://cdn.syncfusion.com/content/json/de.json";
        string filepath = @"E:\deculture.json";       
        using (WebClient json = new MyWebClient())
        {
            json.DownloadFile(url, filepath);          //Fetch the json and store in that corresponding path.
        }
        this.JsRuntime.Ejs().LoadLocaleData(filepath).SetCulture("de");
    }

}